{
  "name": "Deck",
  "tagName": "x-deck",
  "version": "0.1.0",
  "author": "Leon Zhang",
  "description": "A box in which <x-card> elements can be cycled independently of order with a variety of different transitions",
  "demo": "demo/index.html",
  "categories": [
    "ui"
  ],
  "compatibility": {
    "firefox": 5,
    "chrome": 4,
    "ie": 9,
    "opera": 12,
    "android": 2.1,
    "ios": 4
  },
  "documentation": {
    "description": "A box in which <x-card> elements can be cycled independently of order with a variety of different transitions",
    "attributes": {
      "transition-type": "Defines the kind of transition animation that is used when cycling cards. Valid options: 'scrollLeft', 'scrollUp', 'scrollRight', 'scrollDown', 'flipX', 'flipY', 'coverLeft', 'coverUp', 'coverRight', 'coverDown', 'uncoverLeft', 'uncoverUp', 'uncoverRight', 'uncoverDown', 'none'. Defaults to 'scrollLeft'",
      "selected-index": "Defines which card index will be displayed. If set in the initial markup, this will initialize the given card as the selected card. Defaults to 0.",
      "history-cap": "Defines how many cards to keep in history to allow developers to simply return to the previously displayed card. Defaults to 10.",
      "x-card: transition-override": "If transition-override is defined on a card, the animation used to transition to this card will be what is given here instead of the deck's animation. Valid options are the same as the <x-deck>'s transition-type attribute."
    },
    "events": {
      "shufflestart": "A shufflestart event is fired by the <x-deck> element when, during the process of transitioning between cards, the two cards are in position to start animating, but have not yet begun the actual animation.\n\nThe event also receives the following custom datamap in `e.detail`:\n{\n    'oldCard': the previously selected x-card node that the transition is animating away from,\n    'newCard': the x-card node that the transition is animating towards\n}",
      "shuffleend": "A `shuffleend` event is fired by the &lt;x-deck&gt; element when a cycle from one card to another has been completed.\n\n**Note:** Much like the `transitionend` event, this is not guaranteed to fire after every transition that fires a shufflestart. For example, if two transitions are queued up, with the second occurring during the first transition, only the second transition's `shuffleend` will fire, due to the first transition being interrupted.\n\nThe event also receives the following custom datamap in `e.detail`:\n\n{\n    'oldCard': the previously selected x-card node that the transition is animating away from,\n    'newCard': the x-card node that the transition is animating towards\n}",
      "cardadd": "Fired by the x-deck whenever an x-card is added.\n\nReceives the following datamap in `e.detail`:\n\n{\n    'card': the x-card that was just added\n}",
      "cardremove": "Fired by the x-deck whenever an x-card is removed.\n\nReceives the following datamap in `e.detail`:\n\n{\n    'card': the x-card that was just removed\n}",
      "show": "If an <x-card> element receives a 'show' event, the deck will automatically transition to the card that received the event. \n This event is not fired by the x-deck itself."
    },
    "methods": {
      "shuffleTo([progressType])": "Transitions to the x-card at the given index. If given a progressType of 'forward', will perform the forwards animation. If given 'reverse', will performs the reverse animation. If the progressType is 'auto' or omitted, will perform forward animation if going to a larger index, and will perform reverse animation if going to a smaller index.",
      "shuffleNext([progressType])": "Transitions to the next x-card in the deck. Takes an optional progressType of 'forward', 'reverse', or 'auto'. Also takes an optional callback function.",
      "shufflePrev([progressType])": "Transitions to the previous x-card in the deck. Takes an optional progressType of 'forward', 'reverse', or 'auto'. Also takes an optional callback function.",
      "getAllCards()": "Returns a list of all x-card elements in the deck.",
      "getSelectedCard()": "Returns the currently selected x-card in the deck.",
      "getCardIndex(cardEl)": "Given an x-card element, returns its index in this deck, if it is a child element.",
      "getCardAt(index)": "Returns the x-card at the given index.",
      "historyBack([progressType])": "Transitions to the previously displayed card in the deck's history. progressType parameter acts similarly to shuffleTo's progressType parameter.",
      "historyForward([progressType])": "Transitions to the more recently displayed card in the deck's history. progressType parameter acts similarly to shuffleTo's progressType parameter."
    },
    "getters": {
      "numCards": "Returns the number of cards currently in the deck.",
      "selectedCard": "Returns the <x-card> currently displayed in the deck.",
      "cards": "Returns an array of all <x-card>s in the deck.",
      "transitionType": "Returns the value of the 'transition-type' attribute.",
      "selectedIndex": "Returns the value of the 'selected-index' attribute.",
      "historyCap": "Returns the value of the 'history-cap' attribute.",
      "currHistorySize": "Returns the number of cards currently stored in the deck's history.",
      "currHistoryIndex": "Returns the deck's current index in its history stack.",
      "transitionOverride (on <x-card> element)": "Returns the transition override of the card."
    },
    "setters": {
      "transitionType": "Sets the value of the 'transition-type' attribute.",
      "selectedIndex": "Sets the value of the 'selected-index' attribute.",
      "historyCap": "Sets the value of the 'history-cap' attribute.",
      "transitionOverride (on <x-card> element)": "Sets the transition override of the card."
    }
  }
}